---
layout: post
title: "Kubernetes_38 Cluster Upgrade Process"
date: 2023-01-13
last_modified_at: 2023-01-13
categories: [Kubernetes]
tags: [Kubernetes]
---

# Cluster Upgrade Process

이전 포스팅에서 Kubernetes가 소프트웨어 릴리스를 관리하는 방법을 보았다.   

여기에서는 일단 etcd, CoreDNS 등 외부 컴포넌트에 대한 의존도는 제쳐두고 코어 컨트롤 플레인 컴포넌트에 집중할 것이다.    
이 모든 것들이 같은 버전을 갖는 것이 의무일까? 아니다. 컴포넌트들은 서로 다른 릴리즈 버전을 가질 수 있다.   

Kube API 서버는 컨트롤 플레인의 기본 컴포넌트이며 다른 모든 구성 요소와 통신하는 구성 요소이기 때문에   
다른 어떤 컴포넌트도 kube API 서버보다 높은 버전으로 존재해서는 안 된다.   

컨트롤러 관리자 및 스케줄러는 Kube API 서버보다 한 버전 아래의 버전으로 존재할 수 있다.   
따라서 kube API 서버가 x였다면 컨트롤러 매니저와 kube 스케줄러는 x에서 1을 뺀 값일 수 있다.    
그리고 Kubelet과 kube proxy 컴포넌트는 x에서 2를 뺀 버전 이하로 존재할 수 있다.   
따라서 kube API 서버가 1.10에 있다면 컨트롤러 매니저와 스케줄러는 1.10 또는 1.9에 있을 수 있으며, kubelet과 kube proxy는 1.8에 있을 수 있다.   
이것들 중 어느 것도 1.11과 같은, kube API 서버보다 높은 버전에 있을 수 없다.    
kube control의 경우는 그렇지 않다.    
kube control 유틸리티는 API 서버보다 높은 버전인 1.11일 수 있으며, API 서버와 동일한 버전인 1.10이 될 수도있고, API 서버보다 낮은 버전인 1.9가 될 수도 있다.   

버전에서 허용되는 Skew(버전 차이 정책) 버전을 사용하여 라이브 업그레이드를 수행할 수 있다.    
필요한 경우 구성요소별로 업그레이드할 수 있다. 그렇다면 언제 업그레이드해야 할까?    
현재 가지고 있는 쿠버네티스가 1.10이고, 쿠버네티스가 버전 1.11과 1.12를 출시했다고 가정해보자.    
쿠버네티스는 최근 3개의 마이너 버전까지만 지원한다.    
따라서 1.12가 최신 릴리즈인 쿠버네티스는 버전 1.12, 1.11 및 1.10을 지원한다. 1.13이 릴리즈되면 버전 1.13, 1.12 및 1.11만 지원되는 것이다.    
1.13 릴리즈 전에 클러스터를 다음 릴리스로 업그레이드하는 것이 좋다.    
그럼 어떻게 업그레이드해야 할까? 1.10에서 1.13으로 직접 업그레이드할까?    
아니다. 한 번에 하나의 버전씩 업그레이드 해야한다.   
1.10에서 1.11로 업그레이드한 다음 1.11에서 1.12로 업그레이드, 그 다음 1.12에서 1.13으로 업그레이드하는 것이 좋다.    

업그레이드 프로세스는 클러스터 설정 방식에 따라 달라진다.   
클러스터가 Google과 같은 클라우드 서비스 공급자에 배포된 관리되는 Kubernetes 클러스터인 경우를 예로 들 수 있다.    
Google Kubernetes 엔진을 사용하면 클릭 몇 번으로 클러스터를 쉽게 업그레이드할 수 있다.    
kubeadm과 같은 도구를 사용하여 클러스터를 배포한 경우 이 도구를 사용하여 클러스터를 계획하고 업그레이드할 수 있다.    
클러스터를 처음부터 배포한 경우 클러스터의 여러 구성 요소를 직접 수동으로 업그레이드한다.    

여기에서는 kubeadm에 의한 옵션들을 살펴볼 것이다.   
production 호스팅 pod에서 실행되는 마스터 및 worker 노드가 있는 클러스터가 사용자에게 서비스를 제공한다.    
노드 및 컴포넌트는 버전 1.10이라고 하자. 클러스터 업그레이드에는 두 가지 주요 단계가 포함된다.    
먼저 마스터 노드를 업그레이드한 다음 worker 노드를 업그레이드한다.    
마스터를 업그레이드하는 동안 API 서버, 스케줄러 및 컨트롤러 매니저와 같은 control plain components가 잠시 중단된다.   

마스터가 다운되었다고 해서 클러스터의 작업자 노드와 애플리케이션이 영향을 받는 것은 아니다.    
worker 노드에서 호스팅되는 모든 워크로드는 마스터가 다운되었기 때문에 사용자에게 정상적인 서비스를 계속 제공한다.   
kube control 또는 다른 Kubernetes API를 사용하여 클러스터에 액세스할 수 없다.   
새 애플리케이션을 배포하거나 기존 애플리케이션을 삭제하거나 수정할 수도 없다.   
컨트롤러 관리자도 작동하지 않는다.   
포드가 실패하면 새 포드가 자동으로 생성되지 않는다.   
그러나 노드와 pod가 가동되는 한 애플리케이션은 가동되어야 하며 사용자는 영향을 받지 않는다.   

업그레이드가 완료되고 클러스터가 백업되면 정상적으로 작동해야 한다.   
이제 버전 1.11에는 마스터 및 마스터 구성 요소가 있고 버전 1.10에는 worker 노드가 있습니다.   

이제 worker 노드를 업그레이드해야 한다. worker 노드를 업그레이드하는 데 사용할 수 있는 다양한 전략이 있다.    
하나는 한 번에 모든 것을 업그레이드하는 것이지만, 그러면 pod가 다운되어 사용자가 더 이상 애플리케이션에 액세스할 수 없게 된다.   
업그레이드가 완료되면 노드가 백업되고 새 pod가 스케줄링되며 사용자가 액세스를 재개할 수 있다. 다운타임이 필요한 전략 중 하나이다.   

두 번째 전략은 한 번에 하나의 노드를 업그레이드하는 것이다. 마스터가 업그레이드되고 노드가 업그레이드 대기 중인 상태로 돌아간다.   
먼저 워크로드가 두 번째 및 세 번째 노드로 이동하고 사용자가 이 노드에서 서비스를 제공하는 첫 번째 노드를 업그레이드한다.   
첫 번째 노드가 업그레이드되고 백업되면 워크로드가 첫 번째 노드와 세 번째 노드로 이동하는 두 번째 노드를 업데이트 한다.   
마지막으로, 첫번째와 두번째 노드간에 공유되는 세 번째 노드가 업그레이드 된다.    
모든 노드를 최신 버전으로 업그레이드할 때까지 동일한 절차를 수행하여 노드를 1.11에서 1.12로 업그레이드한 다음 1.13으로 업그레이드 한다.   

세 번째 전략은 클러스터에 새로운 버전이 있는 새 노드를 추가하는 것이다.    
이는 새 노드를 쉽게 프로비저닝하고 이전 노드를 decommission할 수 있는 클라우드 환경에 있는 경우 특히 편리하다.   
새 소프트웨어 버전이 있는 노드를 클러스터에 추가하고 워크로드를 새 소프트웨어 버전이 있는 모든 새 노드로 이동한 후 이전 노드를 제거할 수 있다.   
이 클러스터를 1.11에서 1.13으로 업그레이드한다고 가정해보자. kubeadm에는 클러스터 업그레이드에 도움이 되는 업그레이드 명령이 있다.   
kubeadm을 사용하여 kubeadm upgrade plan 명령을 실행하면 현재 클러스터 버전, kubeadm tool 버전, 쿠버네티스의 latest stable 버전과 같은 정보를 얻을 수 있다.   

그런 다음에는 모든 control plane components와 해당 버전 및 업그레이드할 수 있는 버전이 나열된다.   
또한 control plane components를 업그레이드한 후에는 각 노드의 kubelet 버전을 수동으로 업그레이드해야 한다.   
kubelet은 kubelet을 설치하거나 업그레이드하지 않는다.   
클러스터를 업그레이드하는 명령을 제공한다. 클러스터를 업그레이드하려면 먼저 kubeadm 도구 자체를 업그레이드해야 한다.   
kubeadm tool은 쿠베네티스와 동일한 소프트웨어 버전을 따른다.   
현재는 1.11를 가지고 있지만 1.13으로 업그레이드 하고 싶다. 하지만 한 번에 하나의 버전만 업그레이드 할 수 있다는 것을 기억하자.   
먼저 1.12로 변경한 후 먼저 kubeadm 도구 자체를 버전 1.12로 업그레이드한다.   

---




