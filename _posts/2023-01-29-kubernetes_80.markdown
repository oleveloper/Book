---
layout: post
title: "Kubernetes_80 Application Failure"
date: 2023-01-29
last_modified_at: 2023-01-29
categories: [Kubernetes]
tags: [Kubernetes]
---

# Application Failure

여기부터는 트러블 슈팅에 대해서 다룬다. 
먼저 애플리케이션 장애부터 시작하도록 하자.
웹과 데이터베이스 서버가 있는 2-tier 애플리케이션을 살펴보자.
데이터베이스 pod는 데이터베이스 애플리케이션을 호스팅하고 데이터베이스 서비스를 통해 웹 서버를 서비스한다.
웹 서버는 웹 pod에서 호스팅되며 웹 서비스를 통해 사용자에게 서비스를 제공한다.

<img width="271" alt="스크린샷 2023-01-29 오후 10 54 02" src="https://user-images.githubusercontent.com/83587720/215334150-75d26cc2-fa99-486d-a0c8-3a0390dd8149.png">
시작하기 전에 응용 프로그램이 어떻게 구성되어 있는지를 기록하거나 지도 또는 차트를 그리는 것이 좋다.
Failure에 대해 얼마나 알고 있는지에 따라 이 map의 양쪽 끝에서 시작하도록 선택할 수 있다.
그러나 문제의 근본 원인을 찾을 때까지 이 맵의 모든 개체와 링크를 확인해야 한다.

먼저 애플리케이션 frontend부터 시작한다.
애플리케이션에 액세스할 수 있는지 여부를 테스트하는 표준 방법을 사용한다.
웹 애플리케이션인 경우, curl을 사용하여 노드 포트의 IP에서 웹 서버에 액세스할 수 있는지 확인한다.

다음으로 서비스를 확인한다.
web pod의 엔드포인트를 발견했는가? 이 경우에도 그랬지만 그렇지 않은 경우 pod 검색 서비스를 확인할 수 있다.
서비스에 구성된 selector를 pod에 구성된 selector와 일치하는지 비교한다.

다음으로 pod 자체를 확인하고 running 상태인지 확인한다.
```
kubectl get pod
```
pod의 상태와 재시작 횟수를 통해 pod의 애플리케이션이 실행 중인지 아니면 재시작 중인지 알 수 있다.
describe 명령을 사용하여 pod와 관련된 이벤트를 확인한다.
```
kubectl describe pod web
```
아래와 같이 logs 명령을 사용하여 응용 프로그램의 로그를 확인한다.
```
kubectl logs web
```
장애로 인해 pod가 다시 시작되는 경우 현재 버전의 컨테이너를 실행 중인 pod의 로그에 마지막으로 실패한 이유가 반영되지 않을 수 있다.
따라서 대시 F 옵션을 사용하여 이러한 로그를 보고 애플리케이션이 다시 실패할 때까지 기다리거나 이전 옵션을 사용하여 이전 pod의 로그를 확인해야 한다.
다음으로 DB 서비스의 상태를 이전과 같이 확인하고 마지막으로 DB pod 자체를 확인한다.
DB pod의 로그를 확인하고 데이터베이스에 오류가 있는지 확인한다.
