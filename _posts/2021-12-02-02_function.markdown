---
layout: post
title:  "Function"
date:   2021-12-02
last_modified_at: 2021-12-02
categories: [Clean Code]
tags: [Clean Code, Function]
---
# Function

### SOLID 원칙
#### SRP. Single Responsibility Principle 단일 책임 원칙
- 한 클래스는 하나의 책임만 가져야 한다.  
- 어떤 변화에 의해 클래스를 변경해야 하는 이유는 오직 하나뿐이어야만 한다.  
- 변경에 의한 연쇄작용에서 자유로워질 수 있다.  
- 가독성 향상되고 유지보수가 용이해진다.

#### OCP. Open-Closed Principle 개방-폐쇄 원칙
- 확장에는 열려있으나 변경에는 닫혀 있어야 한다.
- 최소한의 비용으로 변경을 했을 때 확장이 가능해야 한다.
- 요구사항을 추가했을 때 기존의 기능에는 수정이 일어나지 않아야 한다.
- 객체지향의 추상화와 다형성을 활용한다.

#### LSP. Liskov Substitution Principle 리스코프 치환 원칙
- 서브타입은 언제나 Base 타입으로 교체할 수 있어야 한다.
- 클래스를 사용할 때 부모클래스로 캐스팅하여 또는 인터페이스로 사용이 될 수 있어야 한다.
- 서브타입은 베이스타입이 약속한 규약(접근 제한자, 예외)을 지켜야 한다.
- 클래스 상속, 인터페이스 상속을 이용해 확장성을 획득한다.
- 다형성과 확장성을 극대화 하기 위해 인터페이스를 사용하는 것이 더 좋다.
- Composition(합성)을 이용할 수도 있다.

#### ISP. Interface Segregation Principle 인터페이스 분리 원칙
- 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.
- 인터페이스를 뚱뚱하게 만들지 않고, 기능을 단위로 하여 인터페이스를 분리해서 만들도록 한다. 
- SRP가 클래스의 단일책임이라면, ISP는 인터페이스의 단일책이다.

#### DIP. Dependency Invertion Principle 의존성 역전 원칙
- 상위 모델은 하위 모델에 의존하면 안된다. 둘 다 추상화에 의존해야 한다. 추상화는 세부 사항에 의존해서는 안된다. 세부사항은 추상화에 따라 달라진다.
- 하위 모델의 변경이 상위 모듈의 변경을 요구하는 위계 관계를 끊는다.
- 실제 사용관계는 그대로이지만, 추상화를 매개로 메시지를 주고 받으며 관계를 느슨하게 만든다.
