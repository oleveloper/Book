---
layout: post
title: "Kubernetes_27 Configuring Scheduler Profiles"
date: 2023-01-08
last_modified_at: 2023-01-08
categories: [Kubernetes]
tags: [Kubernetes]
---

# Configuring Scheduler Profiles

스케줄러 프로필이 무엇인지 살펴보기 전에 쿠버네티스 스케줄러가 작동하는 방식을 요약해보자.   
네 개의 노드가 있고 pod 정의 파일이 있다고 가정하자.    
```yml
apiVersion: v1
kind: Pod
metadata:
  name: simple-webapp-color
spec:
  priorityClassName: high-priority
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
      resources:
        requests:
          memory: "1Gi"
          cpu: 10
```
네 개의 노드 중 하나에서는 스케줄링을 대기하고 있다.   
네 노드는 각각 4, 4, 12, 16개의 CPU 리소스가 있다고 가정한다.    
우리 pod에는 10CPU의 리소스 요구사항이 있다.    

pod가 생성되면 pod는 스케줄링 queue에서 스케줄링 되기를 기다린다.   
이 단계에서 pod는 pod에 정의된 priority를 기반으로 정렬이 된다.   
우선순위를 정하기 위해 우선 순위 클래스(상기 priorityClassName)를 생성해야 한다.   

먼저 이름을 설정하고, 우선 순위 값을 설정해야 한다.
```
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000000
globalDefault: false
description: "This priority class should be used for XYZ service pods only."
```
위의 설정 파일에서, 이 경우 우선 순위 값이 100만으로 설정된다.   
이건 정말 높은 순위이다.    
우선 순위가 더 높은 pod는 먼저 스케줄링 될 스케줄링 큐의 시작 부분에 위치한다.    
정렬은 이 스케줄링 단계에서 발생한다.   

그 다음, pod는 필터 단계로 진입한다.   
여기에서는 pod를 실행할 수 없는 노드들이 필터링된다.   
처음 두 노드(4, 4개의 CPU 리소스가 있는 노드)에 충분한 리소스가 없으므로 필터링된다.   

다음은 Scoring 단계이다.    
여기는 노드들이 다른 가중치로 점수가 매겨지는 단계이다.   
스케줄러는 앞서 제외한 두 노드를 제외하고 남은 나머지 두 노드에서 노드들이 pod에 필요한 CPU를 예약한 후 가지게 될 여유 공간을 기반으로 점수를 매긴다.   
첫 노드는 2개가 남고, 두 번째 노드에서는 6개가 남는다.   
따라서 두 번째 노드가 더 높은 점수를 얻는다.    
이 노드가 바로 선택이 될 노드이다.    

그리고 마지막 바인딩 단계는 pod가 최종적으로 가장 높은 점수의 노드에 바인딩되는 단계이다.    

이 모든 작업은 특정 플러그인으로 가능하다.   
예를 들어, 스케줄링 큐에 있는 동안 pod를 정렬하는 우선순위 정렬 플러그인은 pod에 기술된 우선 순위에 따라 순서대로 소트한다.   
필터링 단계에서는 node resources fit 플러그인으로 pod에 필요한 리소스가 충분한 노드를 식별하고 그렇지 않은 노드를 필터링한다.   
이 단계에서는 node name plugin도 존재하는데, 이 플러그인은 pod 정의 파일에 노드 이름이 있는지 확인하고, 노드 이름이 있다면 그 이름과 일치하지 않는 모든 노드를 필터링한다.   
또 다른 플러그인으로는 node unschedulable plugin이 있다. 이 플러그인은 unschedulable 플래그가 true로 설정되어 있는 노드를 필터링한다. 이것은 나중에 설명할 예정이다.   
이제 스코어링 단계에서 node resources fit plugin이 pod가 할당된 후의 사용 가능한 리소스를 기반으로 각 노드에 점수를 매긴다.    
이 단계에서는 또한 이미 컨테이너 이미지가 존재하는 서로 다른 노드 사이의 pod에 높은 점수를 부여하는 ImageLocality plugin이 사용된다.    
마지막으로 바인딩 단계에 default binder plugin이 바인딩 매커니즘을 제공한다.   

우리는 우리만의 플러그인을 작성하고 연결시킬 수 있다.   
그리고 이것은 extension point라고 불리는 것을 이용하여 할 수 있다.   
앞서 말한 각 단계에는 extension point가 있고, 여기에 플러그인을 연결할 수 있다.   
스케줄링 큐에는 queue sort extension이 있다.    
filter extension, score extension, bind extension이 플러그인 각각에 연결되어 있다.   

사실 필터 단계에는 preFilter, postFilter 라고 불리우는 다른 확장들이 더 존재한다.    
다른 단계도 마찬가지이다. 따라서 사용할 수 있는 옵션이 너무나도 많다.   
플러그인을 생성하고 각 포인트들에 연결해 나만의 커스텀 코드를 point들의 어느 곳에서나 실행할 수 있다.    
