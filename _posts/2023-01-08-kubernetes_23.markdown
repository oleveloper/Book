---
layout: post
title: "Kubernetes_23 Resource Requirements and Limits"
date: 2023-01-08
last_modified_at: 2023-01-08
categories: [Kubernetes]
tags: [Kubernetes]
---

# Resource Requirements and Limits

세 개의 쿠버네티스 클러스터가 있다고 가정하자.   
각 노드에는 CPU, 메모리, 디스크 리소스 세트가 있다.    
<img width="208" alt="스크린샷 2023-01-08 오후 7 50 44" src="https://user-images.githubusercontent.com/83587720/211192092-d8e98481-8af1-414a-a8ce-c658a2c139e6.png">

모든 pods는 리소스를 소비한다.    
예제의 경우에는 pod가 2개의 CPU, 1개의 메모리, 그리고 디스크 공간을 사용한다고 하자.    
pod가 노드에 배치될 때마다 노드에서 사용할 수 있는 리소스를 소비한다.    

이전에 이야기 한 바와 같이, 비용을 고려하여 pod가 배치 될 노드를 결정하는 것은 쿠버네티스 스케줄러이다.   
노드에 리소스가 충분하지 않은 경우, 스케줄러는 해당 노드에 pod를 스케줄링 하지 않는다.   
대신 pod를 리소스가 충분한 곳에 놓는다.    

사용 가능한 리소스가 충분하지 않은 경우에는 pod 스케줄링을 pending한다.    
그리고 pending 상태인 pod를 볼 수 있다.    

이제 각 pod의 리소스 요구 사항에 대해 초점을 맞추어보자.   
기본적으로 쿠버네티스는 pod 또는 컨테이너 내의 pod가 0.5 CPU와 256Mebibyte의 메모리가 필요하다고 가정한다.      
이를 컨테이너에 대한 리소스 요청, 최소 CPU 용량 또는 컨테이너가 요청한 메모리라고 한다.    
스케줄러가 pod를 노드에 배치하려고 하면 이 숫자들을 사용해 충분한 리소스를 사용할 수 있는 노드를 식별한다.    

애플리케이션에서 더 많은 것 리소스가 필요하다는 것을 알고 있다면 pod 또는 스케줄러 정의 파일에서 값을 수정할 수 있다.    
```yml
apiVersion: v1
kind: Pod
metadata:
  name: simple-webapp-color
spec:
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
      - containerPort: 8080
    resources:
      requests:
        memory: "1Gi"
        cpu: 1
    defaultRequest:
```
resources 아래에 requests라는 섹션을 추가하여 메모리와 CPU 사용량에 대한 값을 지정할 수 있다.   
위의 경우에는 1GB의 메모리와 하나의 vCPU 카운트를 설정했다.    

그렇다면 CPU 한 개가 실제로 의미하는 것은 무엇일까?   
CPU 한 개는 vCPU 1개와 동일하다. 이는 AWS의 vCPU 하나 또는 GCP 또는 Azure의 코어 하나, 또는 하나의 하이퍼스레드이다.   
노드에 충분한 여유가 있는 경우에는 컨테이너에 더 많은 수의 CPU를 요청할 수도 있다.    
메모리와 마찬가지로, 256 Mebibyte를 지정할 수도 있다.   

G와 Gi의 차이점에 주의하자.   
G는 기가바이트로 1000 메가바이트를 의미하며, Gi는 기비바이트를 나타내며 1024 메비바이트를 나타낸다.   
메가바이트와 킬로바이트에도 동일하게 적용된다.   

이제 노드에서 실행되는 컨테이너를 살펴보자.   
도커 세계에서 도커 컨테이너는 노드에서 사용할 수 있는 리소스에 대한 제한이 없다.   
컨테이너가 노드에서 하나의 vCPU로 시작한다고 가정해보자.    
vCPU가 많은 리소스를 사용하여 노드 또는 다른 컨테이너의 default process를 사용하지 못하도록(의역, suffocating) 만들 수 있다.    

그러나 pod의 리소스 사용량에 대해 limit을 설정할 수가 있다.    
기본적으로 쿠버네티스는 하나의 vCPU를 컨테이너로 제한한다.      
따라서 유저가 명시적으로 지정하지 않으면 컨테이너 노드에서 하나의 vCPU만 사용하도록 제한된다.   

메모리도 마찬가지이다.    
쿠버네티스는 컨테이너에 대해 512Mi의 제한을 설정한다.   
기본 제한이 마음에 들지 않는다면 리소스 섹션 아래에 limit 섹션을 추가하여 변경할 수 있다.    
```yml
apiVersion: v1
kind: LimitRange
metadata:
  name: mem-limit-range
spec:
  limits:
  - default:
      memory: 512Mi
    defaultRequest:
      memory: 256Mi
    type: Container
```

pod가 생성되면 쿠버네티스는 컨테이너에 대해 새 limit을 설정한다.   
pod 내의 각 컨테이너에 대해 limit과 requests가 설정되어 있음을 꼭 기억하도록 하자.    

pod가 지정된 리소스 한도를 초과하려고 하면 어떻게 될까?   
CPU의 경우 쿠버네티스가 CPU를 조절하여 지정된 한도를 넘지 않도록 한다.   
컨테이너는 limit보다 더 많은 CPU 리소스를 사용할 수 없다.   
   
그러나 메모리의 경우, 컨테이너는 limit보다 더 많은 메모리 리소스를 사용할 수 있다.   
따라서 pod가 더 많은 메모리를 지속적으로 사용하려고 하면 pod가 종료된다.    
