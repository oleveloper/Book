---
layout: post
title:  "Naming"
date:   2021-12-01
last_modified_at: 2021-12-01
categories: [Clean Code]
tags: [Clean Code, Naming]
---

# Clean Code

### 나쁜 코드
좋은 코드라고 해서 이상한 부분이 0%인 것은 아니다. 하지만 나쁜 코드는 '이상하다' 라고 생각되는 부분이 많다. 
나쁜 코드의 특징은 아래와 같다.
* 성능이 나쁜 코드
    - 불필요한 연산이 들어간다.
* 의미가 모호한 코드
    - 이해하기 어렵다.
* 중복된 코드
    - 중복된 코드들은 버그를 발생시키기 십상이다. 

### 나쁜 코드는 왜 나쁜가?
* 나쁜 코드는 계속 나쁜 코드를 만든다.
* 기술부채를 만들어 팀의 생산성을 저하시킨다.
* 결국 새로운 시스템을 만들어야 한다. 이는 현실적으로 너-무 어렵다!

### 나쁜 코드는 왜 짜게 되는가?
* 일정이 촉박하기 때문이다.
  - 그러나 나쁜 코드를 가지고 계속 유지보수를 한다면 종래에는 간단한 부분도 일정을 못맞추게 될 것이다.
* 영향범위가 넓기 때문이다.
  - 영향범위가 넓어서 다른 부분에 버그가 발생할까 봐 쉽게 건드리지 못한다. 
  
### 클린 코드
* 성능이 좋은 코드
* 의미가 명확한 코드 (가독성이 좋다!)
* 중복이 없는 코드

- 깨끗한 코드는 한 가지를 제대로 한다. -비야네 스트롭스트룹
- 깨끗한 코드는 잘 쓴 문장처럼 읽힌다. -그레디 부치

코드를 유지보수를 할 때에는 전보다 더 깨끗하게 만들어야 한다. 


# Naming

#### 의미가 분명한 이름으로 짓는다
```java
int a, boolean b
```
... 이런 이름은 짓지 않도록 한다.

#### i j k 를 사용하지 않는다
```java
for (int i = 0; i < names.size(); i++) {
  ...
}
```
배열 순회 시 i, j, k 대신 명확한 이름을 사용하도록 한다.

* 아래와 같이 advanced for statement를 사용하거나...
```java
for (String name : names) {
  ...
}
```

* lambda를 사용할 수도 있다.
```java
names.stream().forEach{
 name -> ...
```

* 또는 맥락에 맞는 변수명을 사용하도록 한다.

#### 변수명을 통일한다.
    - repository / repo 
    - tree / ast 

#### 변수명에 타입을 넣지 않도록 한다.
    - String nameString 👎 / String name 👍
    - User[] userArray 👎 / User[] users 👍
    - List<User> userList 👍, users 👍
    - Map<User> userMap 👍
    - public interface IShapeFactory 👎 / public interface ShapeFactory 👍
    
#### 패키지명은 모두 lowercase를 사용하며, underscores를 사용하지 않도록 한다
    - com.humnyaring.useraccount(👍)
    - com.humnyaring.userAccount(👎)
    - com.humnyaring.user_account(👎)
    
#### Upper Camel Case
- 클래스는 명사, 명사구로 짓는다
    - User, Character
- 인터페이스는 명사, 명사구, 형용사로 짓는다
    - Readable
- 테스트 클래스는 Test로 끝낸다
    - IntegrationTest
    
#### Lower Camel Case
- 메서드는 동사, 동사구로 짓는다
    - saveAccount
- junit test에는 underscore가 사용되기도 한다
    - `<method under test>` _ `<state>` 와 같은 식으로 사용한다.
